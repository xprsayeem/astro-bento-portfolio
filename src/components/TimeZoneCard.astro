---
import { formatTimeForCanada } from "../lib/helpers";

interface Props {
  label?: string;
  timeZone?:
    | "America/Toronto"
    | "America/Vancouver"
    | "America/Edmonton"
    | "America/Winnipeg"
    | "America/Halifax"
    | "America/St_Johns";
  hour12?: boolean;
}
const { label = "Local time", timeZone = "America/Toronto", hour12 = true } = Astro.props;
const initial = formatTimeForCanada(new Date(), timeZone, hour12);
---

<div class="h-full w-full p-3 text-neutral-100 flex flex-col">
  <p class="text-xs text-neutral-400">{label}</p>
  <time
    id="tz-time"
    class="mt-1 block text-3xl md:text-4xl xl:text-5xl xl:whitespace-nowrap w-full flex-1 font-serif flex justify-center items-center tabular-nums"
    datetime={new Date().toISOString()}
    data-tz={timeZone}
    data-hour12={hour12 ? "true" : "false"}
    suppressHydrationWarning
  >
    {initial}
  </time>
</div>

<script is:inline>
  const el = document.getElementById("tz-time");
  if (el) {
    const tz = el.getAttribute("data-tz") || "America/Toronto";
    const hour12 = (el.getAttribute("data-hour12") || "true") === "true";

    const fmt = new Intl.DateTimeFormat("en-CA", {
      hour: "numeric",
      minute: "2-digit",
      second: "2-digit",
      hour12,
      timeZone: tz,
      timeZoneName: "short",
    });

    function tick() {
      const now = new Date();
      el.textContent = fmt.format(now);
      el.setAttribute("datetime", now.toISOString());
    }

    tick();
    const id = setInterval(tick, 1000);
    window.addEventListener("beforeunload", () => clearInterval(id));
  }
</script>
